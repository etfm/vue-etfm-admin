@use './shared' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;

@include b(scrollbar) {
  @include set-component-css-var('scrollbar', $scrollbar);
}

@include b(scrollbar) {
  position: relative;
  height: 100%;
  overflow: hidden;

  @include e(wrap) {
    height: 100%;
    overflow: auto;

    @include m(hidden-default) {
      scrollbar-width: none;

      &::-webkit-scrollbar {
        display: none;
      }
    }
  }

  @include e(thumb) {
    position: relative;
    display: block;
    width: 0;
    height: 0;
    cursor: pointer;
    background-color: var(#{getCssVarName('scrollbar-bg-color')}, map.get($scrollbar, 'bg-color'));
    border-radius: inherit;
    opacity: var(#{getCssVarName('scrollbar-opacity')}, map.get($scrollbar, 'opacity'));
    transition: getCssVar('transition-duration') background-color;

    &:hover {
      background-color: var(
        #{getCssVarName('scrollbar-hover-bg-color')},
        map.get($scrollbar, 'hover-bg-color')
      );
      opacity: var(
        #{getCssVarName('scrollbar-hover-opacity')},
        map.get($scrollbar, 'hover-opacity')
      );
    }
  }

  @include e(bar) {
    position: absolute;
    right: 2px;
    bottom: 2px;
    z-index: 1;
    border-radius: 4px;

    @include when(vertical) {
      top: 2px;
      width: 6px;

      > div {
        width: 100%;
      }
    }

    @include when(horizontal) {
      left: 2px;
      height: 6px;

      > div {
        height: 100%;
      }
    }
  }
}

.#{$namespace}-scrollbar-fade {
  &-enter-active {
    transition: opacity 340ms ease-out;
  }

  &-leave-active {
    transition: opacity 120ms ease-out;
  }

  &-enter-from,
  &-leave-active {
    opacity: 0;
  }
}
