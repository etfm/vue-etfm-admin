@use 'function' as *;
// forward mixins
@forward 'config';
@forward 'function';
@forward '_var';
@use 'config' as *;

// BEM
@mixin b($block) {
  $B: $namespace + $common-separator + $block !global;
  // el-ass
  .#{$B} {
    @content;
  }
}
// element: aa
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  // .el-ass&__aa,
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

// @mixin configurable-m($modifier, $E-flag: false) {
//   $selector: &;
//   $interpolation: '';

//   @if $E-flag {
//     $interpolation: $element-separator + $E-flag;
//   }

//   @at-root {
//     #{$selector} {
//       .#{$B + $interpolation + $modifier-separator + $modifier} {
//         @content;
//       }
//     }
//   }
// }

// @mixin spec-selector($specSelector: '', $element: $E, $modifier: false, $block: $B) {
//   $modifierCombo: '';

//   @if $modifier {
//     $modifierCombo: $modifier-separator + $modifier;
//   }

//   @at-root {
//     #{&}#{$specSelector}.#{$block + $element-separator + $element + $modifierCombo} {
//       @content;
//     }
//   }
// }
@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}
